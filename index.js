// Generated by CoffeeScript 1.10.0
(function() {
  var InfiniteScroll, STEP_DEFAULT,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  STEP_DEFAULT = 10;

  module.exports = InfiniteScroll = (function() {
    function InfiniteScroll() {
      this.inViewport = bind(this.inViewport, this);
      this.infiniteScroll = bind(this.infiniteScroll, this);
    }

    InfiniteScroll.prototype.name = 'k-infinitescroll';

    InfiniteScroll.prototype.updating = false;

    InfiniteScroll.prototype.element = false;

    InfiniteScroll.prototype.queryObject = null;

    InfiniteScroll.prototype.path = null;

    InfiniteScroll.prototype.collection = null;

    InfiniteScroll.prototype.create = function() {
      var element, qopath;
      element = this.model.get('element');
      qopath = this.model.get('qopath');
      this.path = this.model.get('path');
      this.step = parseInt(this.model.get('step') || STEP_DEFAULT, 10);
      this.collection = this.model.get('collection');
      if (this.collection && this.path && element && qopath && typeof window !== 'undefined') {
        window.addEventListener('scroll', this.infiniteScroll);
        this.element = document.getElementById(element);
        return this.queryObject = this.model.root.get(qopath);
      }
    };

    InfiniteScroll.prototype.infiniteScroll = function() {
      var last, postQ, postQuery;
      last = this.element && this.element.lastChild.previousSibling;
      if (this.queryObject && last && !this.updating && this.inViewport(last)) {
        this.updating = true;
        postQuery = this.model.root._queries.get(this.collection, this.queryObject);
        this.queryObject['$limit'] += this.step;
        postQ = this.model.root.query(this.collection, this.queryObject);
        return this.model.subscribe(postQ, (function(_this) {
          return function(err) {
            _this.model.root.ref(_this.path, postQ);
            if (postQuery) {
              return _this.model.root.unsubscribe(postQuery, function(err) {
                return _this.updating = false;
              });
            } else {
              return _this.updating = false;
            }
          };
        })(this));
      }
    };

    InfiniteScroll.prototype.inViewport = function(el) {
      var rect;
      if (el && el.getBoundingClientRect) {
        rect = el.getBoundingClientRect();
        return rect.top >= 0 && rect.left >= 0 && rect.bottom > 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
      }
    };

    return InfiniteScroll;

  })();

}).call(this);
